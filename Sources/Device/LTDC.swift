// Generated by svd2swift.

import MMIO

/// LCD-TFT Controller
@RegisterBlock
public struct LTDC {
    /// Synchronization Size Configuration Register
    @RegisterBlock(offset: 0x8)
    public var sscr: Register<SSCR>

    /// Back Porch Configuration Register
    @RegisterBlock(offset: 0xc)
    public var bpcr: Register<BPCR>

    /// Active Width Configuration Register
    @RegisterBlock(offset: 0x10)
    public var awcr: Register<AWCR>

    /// Total Width Configuration Register
    @RegisterBlock(offset: 0x14)
    public var twcr: Register<TWCR>

    /// Global Control Register
    @RegisterBlock(offset: 0x18)
    public var gcr: Register<GCR>

    /// Shadow Reload Configuration Register
    @RegisterBlock(offset: 0x24)
    public var srcr: Register<SRCR>

    /// Background Color Configuration Register
    @RegisterBlock(offset: 0x2c)
    public var bccr: Register<BCCR>

    /// Interrupt Enable Register
    @RegisterBlock(offset: 0x34)
    public var ier: Register<IER>

    /// Interrupt Status Register
    @RegisterBlock(offset: 0x38)
    public var isr: Register<ISR>

    /// Interrupt Clear Register
    @RegisterBlock(offset: 0x3c)
    public var icr: Register<ICR>

    /// Line Interrupt Position Configuration Register
    @RegisterBlock(offset: 0x40)
    public var lipcr: Register<LIPCR>

    /// Current Position Status Register
    @RegisterBlock(offset: 0x44)
    public var cpsr: Register<CPSR>

    /// Current Display Status Register
    @RegisterBlock(offset: 0x48)
    public var cdsr: Register<CDSR>

    /// Layerx Control Register
    @RegisterBlock(offset: 0x84)
    public var l1cr: Register<L1CR>

    /// Layerx Window Horizontal Position Configuration Register
    @RegisterBlock(offset: 0x88)
    public var l1whpcr: Register<L1WHPCR>

    /// Layerx Window Vertical Position Configuration Register
    @RegisterBlock(offset: 0x8c)
    public var l1wvpcr: Register<L1WVPCR>

    /// Layerx Color Keying Configuration Register
    @RegisterBlock(offset: 0x90)
    public var l1ckcr: Register<L1CKCR>

    /// Layerx Pixel Format Configuration Register
    @RegisterBlock(offset: 0x94)
    public var l1pfcr: Register<L1PFCR>

    /// Layerx Constant Alpha Configuration Register
    @RegisterBlock(offset: 0x98)
    public var l1cacr: Register<L1CACR>

    /// Layerx Default Color Configuration Register
    @RegisterBlock(offset: 0x9c)
    public var l1dccr: Register<L1DCCR>

    /// Layerx Blending Factors Configuration Register
    @RegisterBlock(offset: 0xa0)
    public var l1bfcr: Register<L1BFCR>

    /// Layerx Color Frame Buffer Address Register
    @RegisterBlock(offset: 0xac)
    public var l1cfbar: Register<L1CFBAR>

    /// Layerx Color Frame Buffer Length Register
    @RegisterBlock(offset: 0xb0)
    public var l1cfblr: Register<L1CFBLR>

    /// Layerx ColorFrame Buffer Line Number Register
    @RegisterBlock(offset: 0xb4)
    public var l1cfblnr: Register<L1CFBLNR>

    /// Layerx CLUT Write Register
    @RegisterBlock(offset: 0xc4)
    public var l1clutwr: Register<L1CLUTWR>

    /// Layerx Control Register
    @RegisterBlock(offset: 0x104)
    public var l2cr: Register<L2CR>

    /// Layerx Window Horizontal Position Configuration Register
    @RegisterBlock(offset: 0x108)
    public var l2whpcr: Register<L2WHPCR>

    /// Layerx Window Vertical Position Configuration Register
    @RegisterBlock(offset: 0x10c)
    public var l2wvpcr: Register<L2WVPCR>

    /// Layerx Color Keying Configuration Register
    @RegisterBlock(offset: 0x110)
    public var l2ckcr: Register<L2CKCR>

    /// Layerx Pixel Format Configuration Register
    @RegisterBlock(offset: 0x114)
    public var l2pfcr: Register<L2PFCR>

    /// Layerx Constant Alpha Configuration Register
    @RegisterBlock(offset: 0x118)
    public var l2cacr: Register<L2CACR>

    /// Layerx Default Color Configuration Register
    @RegisterBlock(offset: 0x11c)
    public var l2dccr: Register<L2DCCR>

    /// Layerx Blending Factors Configuration Register
    @RegisterBlock(offset: 0x120)
    public var l2bfcr: Register<L2BFCR>

    /// Layerx Color Frame Buffer Address Register
    @RegisterBlock(offset: 0x12c)
    public var l2cfbar: Register<L2CFBAR>

    /// Layerx Color Frame Buffer Length Register
    @RegisterBlock(offset: 0x130)
    public var l2cfblr: Register<L2CFBLR>

    /// Layerx ColorFrame Buffer Line Number Register
    @RegisterBlock(offset: 0x134)
    public var l2cfblnr: Register<L2CFBLNR>

    /// Layerx CLUT Write Register
    @RegisterBlock(offset: 0x144)
    public var l2clutwr: Register<L2CLUTWR>
}

extension LTDC {
    /// Synchronization Size Configuration Register
    @Register(bitWidth: 32)
    public struct SSCR {
        /// Horizontal Synchronization Width (in units of pixel clock period)
        @ReadWrite(bits: 16..<26)
        public var hsw: HSW

        /// Vertical Synchronization Height (in units of horizontal scan line)
        @ReadWrite(bits: 0..<11)
        public var vsh: VSH
    }

    /// Back Porch Configuration Register
    @Register(bitWidth: 32)
    public struct BPCR {
        /// Accumulated Horizontal back porch (in units of pixel clock period)
        @ReadWrite(bits: 16..<26)
        public var ahbp: AHBP

        /// Accumulated Vertical back porch (in units of horizontal scan line)
        @ReadWrite(bits: 0..<11)
        public var avbp: AVBP
    }

    /// Active Width Configuration Register
    @Register(bitWidth: 32)
    public struct AWCR {
        /// AAV
        @ReadWrite(bits: 16..<26)
        public var aav: AAV

        /// Accumulated Active Height (in units of horizontal scan line)
        @ReadWrite(bits: 0..<11)
        public var aah: AAH
    }

    /// Total Width Configuration Register
    @Register(bitWidth: 32)
    public struct TWCR {
        /// Total Width (in units of pixel clock period)
        @ReadWrite(bits: 16..<26)
        public var totalw: TOTALW

        /// Total Height (in units of horizontal scan line)
        @ReadWrite(bits: 0..<11)
        public var totalh: TOTALH
    }

    /// Global Control Register
    @Register(bitWidth: 32)
    public struct GCR {
        /// Horizontal Synchronization Polarity
        @ReadWrite(bits: 31..<32)
        public var hspol: HSPOL

        /// Vertical Synchronization Polarity
        @ReadWrite(bits: 30..<31)
        public var vspol: VSPOL

        /// Data Enable Polarity
        @ReadWrite(bits: 29..<30)
        public var depol: DEPOL

        /// Pixel Clock Polarity
        @ReadWrite(bits: 28..<29)
        public var pcpol: PCPOL

        /// Dither Enable
        @ReadWrite(bits: 16..<17)
        public var den: DEN

        /// Dither Red Width
        @ReadOnly(bits: 12..<15)
        public var drw: DRW

        /// Dither Green Width
        @ReadOnly(bits: 8..<11)
        public var dgw: DGW

        /// Dither Blue Width
        @ReadOnly(bits: 4..<7)
        public var dbw: DBW

        /// LCD-TFT controller enable bit
        @ReadWrite(bits: 0..<1)
        public var ltdcen: LTDCEN
    }

    /// Shadow Reload Configuration Register
    @Register(bitWidth: 32)
    public struct SRCR {
        /// Vertical Blanking Reload
        @ReadWrite(bits: 1..<2)
        public var vbr: VBR

        /// Immediate Reload
        @ReadWrite(bits: 0..<1)
        public var imr: IMR
    }

    /// Background Color Configuration Register
    @Register(bitWidth: 32)
    public struct BCCR {
        /// Background Color Red value
        @ReadWrite(bits: 0..<24)
        public var bc: BC
    }

    /// Interrupt Enable Register
    @Register(bitWidth: 32)
    public struct IER {
        /// Register Reload interrupt enable
        @ReadWrite(bits: 3..<4)
        public var rrie: RRIE

        /// Transfer Error Interrupt Enable
        @ReadWrite(bits: 2..<3)
        public var terrie: TERRIE

        /// FIFO Underrun Interrupt Enable
        @ReadWrite(bits: 1..<2)
        public var fuie: FUIE

        /// Line Interrupt Enable
        @ReadWrite(bits: 0..<1)
        public var lie: LIE
    }

    /// Interrupt Status Register
    @Register(bitWidth: 32)
    public struct ISR {
        /// Register Reload Interrupt Flag
        @ReadOnly(bits: 3..<4)
        public var rrif: RRIF

        /// Transfer Error interrupt flag
        @ReadOnly(bits: 2..<3)
        public var terrif: TERRIF

        /// FIFO Underrun Interrupt flag
        @ReadOnly(bits: 1..<2)
        public var fuif: FUIF

        /// Line Interrupt flag
        @ReadOnly(bits: 0..<1)
        public var lif: LIF
    }

    /// Interrupt Clear Register
    @Register(bitWidth: 32)
    public struct ICR {
        /// Clears Register Reload Interrupt Flag
        @WriteOnly(bits: 3..<4)
        public var crrif: CRRIF

        /// Clears the Transfer Error Interrupt Flag
        @WriteOnly(bits: 2..<3)
        public var cterrif: CTERRIF

        /// Clears the FIFO Underrun Interrupt flag
        @WriteOnly(bits: 1..<2)
        public var cfuif: CFUIF

        /// Clears the Line Interrupt Flag
        @WriteOnly(bits: 0..<1)
        public var clif: CLIF
    }

    /// Line Interrupt Position Configuration Register
    @Register(bitWidth: 32)
    public struct LIPCR {
        /// Line Interrupt Position
        @ReadWrite(bits: 0..<11)
        public var lipos: LIPOS
    }

    /// Current Position Status Register
    @Register(bitWidth: 32)
    public struct CPSR {
        /// Current X Position
        @ReadOnly(bits: 16..<32)
        public var cxpos: CXPOS

        /// Current Y Position
        @ReadOnly(bits: 0..<16)
        public var cypos: CYPOS
    }

    /// Current Display Status Register
    @Register(bitWidth: 32)
    public struct CDSR {
        /// Horizontal Synchronization display Status
        @ReadOnly(bits: 3..<4)
        public var hsyncs: HSYNCS

        /// Vertical Synchronization display Status
        @ReadOnly(bits: 2..<3)
        public var vsyncs: VSYNCS

        /// Horizontal Data Enable display Status
        @ReadOnly(bits: 1..<2)
        public var hdes: HDES

        /// Vertical Data Enable display Status
        @ReadOnly(bits: 0..<1)
        public var vdes: VDES
    }

    /// Layerx Control Register
    @Register(bitWidth: 32)
    public struct L1CR {
        /// Color Look-Up Table Enable
        @ReadWrite(bits: 4..<5)
        public var cluten: CLUTEN

        /// Color Keying Enable
        @ReadWrite(bits: 1..<2)
        public var colken: COLKEN

        /// Layer Enable
        @ReadWrite(bits: 0..<1)
        public var len: LEN
    }

    /// Layerx Window Horizontal Position Configuration Register
    @Register(bitWidth: 32)
    public struct L1WHPCR {
        /// Window Horizontal Stop Position
        @ReadWrite(bits: 16..<28)
        public var whsppos: WHSPPOS

        /// Window Horizontal Start Position
        @ReadWrite(bits: 0..<12)
        public var whstpos: WHSTPOS
    }

    /// Layerx Window Vertical Position Configuration Register
    @Register(bitWidth: 32)
    public struct L1WVPCR {
        /// Window Vertical Stop Position
        @ReadWrite(bits: 16..<27)
        public var wvsppos: WVSPPOS

        /// Window Vertical Start Position
        @ReadWrite(bits: 0..<11)
        public var wvstpos: WVSTPOS
    }

    /// Layerx Color Keying Configuration Register
    @Register(bitWidth: 32)
    public struct L1CKCR {
        /// Color Key Red value
        @ReadWrite(bits: 16..<24)
        public var ckred: CKRED

        /// Color Key Green value
        @ReadWrite(bits: 8..<16)
        public var ckgreen: CKGREEN

        /// Color Key Blue value
        @ReadWrite(bits: 0..<8)
        public var ckblue: CKBLUE
    }

    /// Layerx Pixel Format Configuration Register
    @Register(bitWidth: 32)
    public struct L1PFCR {
        /// Pixel Format
        @ReadWrite(bits: 0..<3)
        public var pf: PF
    }

    /// Layerx Constant Alpha Configuration Register
    @Register(bitWidth: 32)
    public struct L1CACR {
        /// Constant Alpha
        @ReadWrite(bits: 0..<8)
        public var consta: CONSTA
    }

    /// Layerx Default Color Configuration Register
    @Register(bitWidth: 32)
    public struct L1DCCR {
        /// Default Color Alpha
        @ReadWrite(bits: 24..<32)
        public var dcalpha: DCALPHA

        /// Default Color Red
        @ReadWrite(bits: 16..<24)
        public var dcred: DCRED

        /// Default Color Green
        @ReadWrite(bits: 8..<16)
        public var dcgreen: DCGREEN

        /// Default Color Blue
        @ReadWrite(bits: 0..<8)
        public var dcblue: DCBLUE
    }

    /// Layerx Blending Factors Configuration Register
    @Register(bitWidth: 32)
    public struct L1BFCR {
        /// Blending Factor 1
        @ReadWrite(bits: 8..<11)
        public var bf1: BF1

        /// Blending Factor 2
        @ReadWrite(bits: 0..<3)
        public var bf2: BF2
    }

    /// Layerx Color Frame Buffer Address Register
    @Register(bitWidth: 32)
    public struct L1CFBAR {
        /// Color Frame Buffer Start Address
        @ReadWrite(bits: 0..<32)
        public var cfbadd: CFBADD
    }

    /// Layerx Color Frame Buffer Length Register
    @Register(bitWidth: 32)
    public struct L1CFBLR {
        /// Color Frame Buffer Pitch in bytes
        @ReadWrite(bits: 16..<29)
        public var cfbp: CFBP

        /// Color Frame Buffer Line Length
        @ReadWrite(bits: 0..<13)
        public var cfbll: CFBLL
    }

    /// Layerx ColorFrame Buffer Line Number Register
    @Register(bitWidth: 32)
    public struct L1CFBLNR {
        /// Frame Buffer Line Number
        @ReadWrite(bits: 0..<11)
        public var cfblnbr: CFBLNBR
    }

    /// Layerx CLUT Write Register
    @Register(bitWidth: 32)
    public struct L1CLUTWR {
        /// CLUT Address
        @WriteOnly(bits: 24..<32)
        public var clutadd: CLUTADD

        /// Red value
        @WriteOnly(bits: 16..<24)
        public var red: RED

        /// Green value
        @WriteOnly(bits: 8..<16)
        public var green: GREEN

        /// Blue value
        @WriteOnly(bits: 0..<8)
        public var blue: BLUE
    }

    /// Layerx Control Register
    @Register(bitWidth: 32)
    public struct L2CR {
        /// Color Look-Up Table Enable
        @ReadWrite(bits: 4..<5)
        public var cluten: CLUTEN

        /// Color Keying Enable
        @ReadWrite(bits: 1..<2)
        public var colken: COLKEN

        /// Layer Enable
        @ReadWrite(bits: 0..<1)
        public var len: LEN
    }

    /// Layerx Window Horizontal Position Configuration Register
    @Register(bitWidth: 32)
    public struct L2WHPCR {
        /// Window Horizontal Stop Position
        @ReadWrite(bits: 16..<28)
        public var whsppos: WHSPPOS

        /// Window Horizontal Start Position
        @ReadWrite(bits: 0..<12)
        public var whstpos: WHSTPOS
    }

    /// Layerx Window Vertical Position Configuration Register
    @Register(bitWidth: 32)
    public struct L2WVPCR {
        /// Window Vertical Stop Position
        @ReadWrite(bits: 16..<27)
        public var wvsppos: WVSPPOS

        /// Window Vertical Start Position
        @ReadWrite(bits: 0..<11)
        public var wvstpos: WVSTPOS
    }

    /// Layerx Color Keying Configuration Register
    @Register(bitWidth: 32)
    public struct L2CKCR {
        /// Color Key Red value
        @ReadWrite(bits: 15..<24)
        public var ckred: CKRED

        /// Color Key Green value
        @ReadWrite(bits: 8..<15)
        public var ckgreen: CKGREEN

        /// Color Key Blue value
        @ReadWrite(bits: 0..<8)
        public var ckblue: CKBLUE
    }

    /// Layerx Pixel Format Configuration Register
    @Register(bitWidth: 32)
    public struct L2PFCR {
        /// Pixel Format
        @ReadWrite(bits: 0..<3)
        public var pf: PF
    }

    /// Layerx Constant Alpha Configuration Register
    @Register(bitWidth: 32)
    public struct L2CACR {
        /// Constant Alpha
        @ReadWrite(bits: 0..<8)
        public var consta: CONSTA
    }

    /// Layerx Default Color Configuration Register
    @Register(bitWidth: 32)
    public struct L2DCCR {
        /// Default Color Alpha
        @ReadWrite(bits: 24..<32)
        public var dcalpha: DCALPHA

        /// Default Color Red
        @ReadWrite(bits: 16..<24)
        public var dcred: DCRED

        /// Default Color Green
        @ReadWrite(bits: 8..<16)
        public var dcgreen: DCGREEN

        /// Default Color Blue
        @ReadWrite(bits: 0..<8)
        public var dcblue: DCBLUE
    }

    /// Layerx Blending Factors Configuration Register
    @Register(bitWidth: 32)
    public struct L2BFCR {
        /// Blending Factor 1
        @ReadWrite(bits: 8..<11)
        public var bf1: BF1

        /// Blending Factor 2
        @ReadWrite(bits: 0..<3)
        public var bf2: BF2
    }

    /// Layerx Color Frame Buffer Address Register
    @Register(bitWidth: 32)
    public struct L2CFBAR {
        /// Color Frame Buffer Start Address
        @ReadWrite(bits: 0..<32)
        public var cfbadd: CFBADD
    }

    /// Layerx Color Frame Buffer Length Register
    @Register(bitWidth: 32)
    public struct L2CFBLR {
        /// Color Frame Buffer Pitch in bytes
        @ReadWrite(bits: 16..<29)
        public var cfbp: CFBP

        /// Color Frame Buffer Line Length
        @ReadWrite(bits: 0..<13)
        public var cfbll: CFBLL
    }

    /// Layerx ColorFrame Buffer Line Number Register
    @Register(bitWidth: 32)
    public struct L2CFBLNR {
        /// Frame Buffer Line Number
        @ReadWrite(bits: 0..<11)
        public var cfblnbr: CFBLNBR
    }

    /// Layerx CLUT Write Register
    @Register(bitWidth: 32)
    public struct L2CLUTWR {
        /// CLUT Address
        @WriteOnly(bits: 24..<32)
        public var clutadd: CLUTADD

        /// Red value
        @WriteOnly(bits: 16..<24)
        public var red: RED

        /// Green value
        @WriteOnly(bits: 8..<16)
        public var green: GREEN

        /// Blue value
        @WriteOnly(bits: 0..<8)
        public var blue: BLUE
    }
}
